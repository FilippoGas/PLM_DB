theme_minimal() +
labs(title = "Observed vs Reference Medians",
x = "", y = "Median Value") +
theme(legend.position = "none")
summary_df <- bind_rows(ref_medians, obs_median)
View(summary_df)
# Step 1: compute medians
obs_mean <- data.frame(mean = mean(observed), type = "Observed")
ref_mean <- data.frame(
mean = sapply(references, mean),
type = "Reference"
)
summary_df <- bind_rows(ref_mean, obs_mean)
# Step 2: plot with jitter (dotplot / beeswarm style)
ggplot(summary_df, aes(x = type, y = median, color = type)) +
geom_jitter(width = 0.2, size = 2, alpha = 0.6) +
scale_color_manual(values = c("Observed" = "#E69F00", "Reference" = "#999999")) +
theme_minimal() +
labs(title = "Observed vs Reference Medians",
x = "", y = "Median Value") +
theme(legend.position = "none")
View(summary_df)
# Step 2: plot with jitter (dotplot / beeswarm style)
ggplot(summary_df, aes(x = type, y = mean, color = type)) +
geom_jitter(width = 0.2, size = 2, alpha = 0.6) +
scale_color_manual(values = c("Observed" = "#E69F00", "Reference" = "#999999")) +
theme_minimal() +
labs(title = "Observed vs Reference Medians",
x = "", y = "Median Value") +
theme(legend.position = "none")
ggplot(summary_df, aes(x = type, y = mean, color = type)) +
geom_jitter(width = 0.2, size = 2, alpha = 0.6) +
scale_color_manual(values = c("Observed" = "#E69F00", "Reference" = "#999999")) +
theme_minimal() +
labs(title = "Observed vs Reference Medians",
x = "", y = "Median Value") +
theme(legend.position = "none")
ggplot(summary_df, aes(x = type, y = mean, color = type)) +
geom_jitter(width = 0.2, size = 2, alpha = 0.6) +
scale_color_manual(values = c("Observed" = "#E69F00", "Reference" = "#999999")) +
theme_minimal() +
labs(title = "Observed vs Reference Medians",
x = "", y = "Median Value") +
theme(legend.position = "none")
ggplot(summary_df, aes(x = type, y = mean, color = type)) +
geom_jitter(width = 0.2, size = 2, alpha = 0.6) +
scale_color_manual(values = c("Observed" = "#E69F00", "Reference" = "#999999")) +
theme_minimal() +
labs(title = "Observed vs Reference Medians",
x = "", y = "Median Value") +
theme(legend.position = "none")
ggplot(summary_df, aes(x = type, y = mean, color = type)) +
geom_jitter(width = 0.2, size = 2, alpha = 0.6) +
scale_color_manual(values = c("Observed" = "#E69F00", "Reference" = "#999999")) +
theme_minimal() +
labs(title = "Observed vs Reference Medians",
x = "", y = "Median Value") +
theme(legend.position = "none")
ggplot(summary_df, aes(x = type, y = mean, color = type)) +
geom_jitter(width = 0.2, size = 2, alpha = 0.6) +
scale_color_manual(values = c("Observed" = "#E69F00", "Reference" = "#999999")) +
theme_minimal() +
labs(title = "Observed vs Reference Medians",
x = "", y = "Median Value") +
theme(legend.position = "none")
# Simulate data
observed <- na.omit(pathogenic)
references <- lapply(1:1000, function(i) sample(na.omit(benign),length(observed),replace=F))
# Step 1: compute medians
obs_mean <- data.frame(mean = mean(observed), type = "Observed")
ref_mean <- data.frame(
mean = sapply(references, mean),
type = "Reference"
)
summary_df <- bind_rows(ref_mean, obs_mean)
# Step 2: plot with jitter (dotplot / beeswarm style)
ggplot(summary_df, aes(x = type, y = mean, color = type)) +
geom_jitter(width = 0.2, size = 2, alpha = 0.6) +
scale_color_manual(values = c("Observed" = "#E69F00", "Reference" = "#999999")) +
theme_minimal() +
labs(title = "Observed vs Reference Medians",
x = "", y = "Median Value") +
theme(legend.position = "none")
# Simulate data
observed <- na.omit(pathogenic)
references <- lapply(1:1000, function(i) sample(na.omit(benign),length(observed),replace=F))
# Step 1: compute medians
obs_mean <- data.frame(mean = mean(observed), type = "Observed")
ref_mean <- data.frame(
mean = sapply(references, mean),
type = "Reference"
)
summary_df <- bind_rows(ref_mean, obs_mean)
# Step 2: plot with jitter (dotplot / beeswarm style)
ggplot(summary_df, aes(x = type, y = mean, color = type)) +
geom_jitter(width = 0.2, size = 2, alpha = 0.6) +
scale_color_manual(values = c("Observed" = "#E69F00", "Reference" = "#999999")) +
theme_minimal() +
labs(title = "Observed vs Reference Medians",
x = "", y = "Median Value") +
theme(legend.position = "none")
# Simulate data
observed <- na.omit(pathogenic)
references <- lapply(1:1000, function(i) sample(na.omit(benign),length(observed),replace=F))
# Step 1: compute medians
obs_mean <- data.frame(mean = mean(observed), type = "Observed")
ref_mean <- data.frame(
mean = sapply(references, mean),
type = "Reference"
)
summary_df <- bind_rows(ref_mean, obs_mean)
# Step 2: plot with jitter (dotplot / beeswarm style)
ggplot(summary_df, aes(x = type, y = mean, color = type)) +
geom_jitter(width = 0.2, size = 2, alpha = 0.6) +
scale_color_manual(values = c("Observed" = "#E69F00", "Reference" = "#999999")) +
theme_minimal() +
labs(title = "Observed vs Reference Medians",
x = "", y = "Median Value") +
theme(legend.position = "none")
# Simulate data
observed <- na.omit(pathogenic)
references <- lapply(1:1000, function(i) sample(na.omit(benign),length(observed),replace=F))
# Step 1: compute medians
obs_mean <- data.frame(mean = mean(observed), type = "Observed")
ref_mean <- data.frame(
mean = sapply(references, mean),
type = "Reference"
)
summary_df <- bind_rows(ref_mean, obs_mean)
# Step 2: plot with jitter (dotplot / beeswarm style)
ggplot(summary_df, aes(x = type, y = mean, color = type)) +
geom_jitter(width = 0.2, size = 2, alpha = 0.6) +
scale_color_manual(values = c("Observed" = "#E69F00", "Reference" = "#999999")) +
theme_minimal() +
labs(title = "Observed vs Reference Medians",
x = "", y = "Median Value") +
theme(legend.position = "none")
# Simulate data
observed <- na.omit(pathogenic)
references <- lapply(1:1000, function(i) sample(na.omit(benign),length(observed),replace=F))
# Step 1: compute medians
obs_mean <- data.frame(mean = mean(observed), type = "Observed")
ref_mean <- data.frame(
mean = sapply(references, mean),
type = "Reference"
)
summary_df <- bind_rows(ref_mean, obs_mean)
# Step 2: plot with jitter (dotplot / beeswarm style)
ggplot(summary_df, aes(x = type, y = mean, color = type)) +
geom_jitter(width = 0.2, size = 2, alpha = 0.6) +
scale_color_manual(values = c("Observed" = "#E69F00", "Reference" = "#999999")) +
theme_minimal() +
labs(title = "Observed vs Reference Medians",
x = "", y = "Median Value") +
theme(legend.position = "none")
# Simulate data
observed <- na.omit(pathogenic)
references <- lapply(1:1000, function(i) sample(na.omit(benign),length(observed),replace=F))
# Step 1: compute medians
obs_mean <- data.frame(mean = mean(observed), type = "Observed")
ref_mean <- data.frame(
mean = sapply(references, mean),
type = "Reference"
)
summary_df <- bind_rows(ref_mean, obs_mean)
# Step 2: plot with jitter (dotplot / beeswarm style)
ggplot(summary_df, aes(x = type, y = mean, color = type)) +
geom_jitter(width = 0.2, size = 2, alpha = 0.6) +
scale_color_manual(values = c("Observed" = "#E69F00", "Reference" = "#999999")) +
theme_minimal() +
labs(title = "Observed vs Reference Medians",
x = "", y = "Median Value") +
theme(legend.position = "none")
wilcox.test(benign,pathogenic)
boxplot(benign,pathogenic)
wilcox.test(benign,pathogenic,alternative = greater)
wilcox.test(benign,pathogenic,alternative = "greater")
wilcox.test(benign,pathogenic,alternative = "lower")
wilcox.test(benign,pathogenic,alternative = "less")
length(benign)
length(pathogenic)
# Your data vectors
big_data <- benign    # replace with your data
small_data <- pathgenic  # replace with your data
small_data <- pathogenic  # replace with your data
# Function to bootstrap median
bootstrap_median <- function(data, n_boot = 1000) {
medians <- numeric(n_boot)
n <- length(data)
for (i in 1:n_boot) {
sample_i <- sample(data, size = n, replace = TRUE)
medians[i] <- median(sample_i)
}
return(medians)
}
# Bootstrap medians
boot_big <- bootstrap_median(big_data, 1000)
boot_small <- bootstrap_median(small_data, 1000)
# Calculate 95% confidence intervals
ci_big <- quantile(boot_big, probs = c(0.025, 0.975))
set.seed(123)
# Your data vectors
big_data <- na.omit(benign)    # replace with your data
small_data <- na.omit(pathogenic)  # replace with your data
# Function to bootstrap median
bootstrap_median <- function(data, n_boot = 1000) {
medians <- numeric(n_boot)
n <- length(data)
for (i in 1:n_boot) {
sample_i <- sample(data, size = n, replace = TRUE)
medians[i] <- median(sample_i)
}
return(medians)
}
# Bootstrap medians
boot_big <- bootstrap_median(big_data, 1000)
boot_small <- bootstrap_median(small_data, 1000)
# Calculate 95% confidence intervals
ci_big <- quantile(boot_big, probs = c(0.025, 0.975))
ci_small <- quantile(boot_small, probs = c(0.025, 0.975))
# Display results
cat("Big data median 95% CI:", round(ci_big, 3), "\n")
cat("Small data median 95% CI:", round(ci_small, 3), "\n")
library(ggplot2)
library(tidyr)
library(dplyr)
df_boot <- data.frame(
median = c(boot_big, boot_small),
dataset = rep(c("Big data", "Small data"), each = 1000)
)
ggplot(df_boot, aes(x = dataset, y = median, fill = dataset)) +
geom_violin(alpha = 0.7) +
geom_point(data = data.frame(dataset = c("Big data", "Small data"),
median = c(median(big_data), median(small_data))),
aes(x = dataset, y = median),
color = "black", size = 3) +
labs(title = "Bootstrap Distributions of Median",
y = "Median", x = "") +
theme_minimal() +
theme(legend.position = "none")
set.seed(123)
# Your data vectors
big_data <- na.omit(benign)    # replace with your data
small_data <- na.omit(pathogenic)  # replace with your data
# Function to bootstrap median
bootstrap_median <- function(data, n_boot = 1000) {
medians <- numeric(n_boot)
n <- length(data)
for (i in 1:n_boot) {
sample_i <- sample(data, size = n, replace = TRUE)
medians[i] <- mean(sample_i)
}
return(medians)
}
# Bootstrap medians
boot_big <- bootstrap_median(big_data, 1000)
boot_small <- bootstrap_median(small_data, 1000)
# Calculate 95% confidence intervals
ci_big <- quantile(boot_big, probs = c(0.025, 0.975))
ci_small <- quantile(boot_small, probs = c(0.025, 0.975))
# Display results
cat("Big data median 95% CI:", round(ci_big, 3), "\n")
cat("Small data median 95% CI:", round(ci_small, 3), "\n")
library(ggplot2)
library(tidyr)
library(dplyr)
df_boot <- data.frame(
median = c(boot_big, boot_small),
dataset = rep(c("Big data", "Small data"), each = 1000)
)
ggplot(df_boot, aes(x = dataset, y = median, fill = dataset)) +
geom_violin(alpha = 0.7) +
geom_point(data = data.frame(dataset = c("Big data", "Small data"),
median = c(median(big_data), median(small_data))),
aes(x = dataset, y = median),
color = "black", size = 3) +
labs(title = "Bootstrap Distributions of Median",
y = "Median", x = "") +
theme_minimal() +
theme(legend.position = "none")
set.seed(123)
# Your data vectors
big_data <- na.omit(benign)    # replace with your data
small_data <- na.omit(pathogenic)  # replace with your data
# Function to bootstrap median
bootstrap_median <- function(data, n_boot = 1000) {
medians <- numeric(n_boot)
n <- length(data)
for (i in 1:n_boot) {
sample_i <- sample(data, size = n, replace = TRUE)
medians[i] <- median(sample_i)
}
return(medians)
}
# Bootstrap medians
boot_big <- bootstrap_median(big_data, 1000)
boot_small <- bootstrap_median(small_data, 1000)
# Calculate 95% confidence intervals
ci_big <- quantile(boot_big, probs = c(0.025, 0.975))
ci_small <- quantile(boot_small, probs = c(0.025, 0.975))
# Display results
cat("Big data median 95% CI:", round(ci_big, 3), "\n")
cat("Small data median 95% CI:", round(ci_small, 3), "\n")
library(ggplot2)
library(tidyr)
library(dplyr)
df_boot <- data.frame(
median = c(boot_big, boot_small),
dataset = rep(c("Big data", "Small data"), each = 1000)
)
ggplot(df_boot, aes(x = dataset, y = median, fill = dataset)) +
geom_violin(alpha = 0.7) +
geom_point(data = data.frame(dataset = c("Big data", "Small data"),
median = c(median(big_data), median(small_data))),
aes(x = dataset, y = median),
color = "black", size = 3) +
labs(title = "Bootstrap Distributions of Median",
y = "Median", x = "") +
theme_minimal() +
theme(legend.position = "none")
benign <- c(scores.types.PLLmaxfreq[[1]],scores.types.PLLmaxfreq[[2]],scores.types.PLLmaxfreq[[3]])
pathogenic <- c(scores.types.PLLmaxfreq[[4]],scores.types.PLLmaxfreq[[5]],scores.types.PLLmaxfreq[[6]])
set.seed(123)
# Your data vectors
big_data <- na.omit(benign)    # replace with your data
small_data <- na.omit(pathogenic)  # replace with your data
# Function to bootstrap median
bootstrap_median <- function(data, n_boot = 1000) {
medians <- numeric(n_boot)
n <- length(data)
for (i in 1:n_boot) {
sample_i <- sample(data, size = n, replace = TRUE)
medians[i] <- median(sample_i)
}
return(medians)
}
# Bootstrap medians
boot_big <- bootstrap_median(big_data, 1000)
boot_small <- bootstrap_median(small_data, 1000)
# Calculate 95% confidence intervals
ci_big <- quantile(boot_big, probs = c(0.025, 0.975))
ci_small <- quantile(boot_small, probs = c(0.025, 0.975))
# Display results
cat("Big data median 95% CI:", round(ci_big, 3), "\n")
cat("Small data median 95% CI:", round(ci_small, 3), "\n")
library(ggplot2)
library(tidyr)
library(dplyr)
df_boot <- data.frame(
median = c(boot_big, boot_small),
dataset = rep(c("Big data", "Small data"), each = 1000)
)
ggplot(df_boot, aes(x = dataset, y = median, fill = dataset)) +
geom_violin(alpha = 0.7) +
geom_point(data = data.frame(dataset = c("Big data", "Small data"),
median = c(median(big_data), median(small_data))),
aes(x = dataset, y = median),
color = "black", size = 3) +
labs(title = "Bootstrap Distributions of Median",
y = "Median", x = "") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_boot, aes(x = dataset, y = median, fill = dataset)) +
geom_violin(alpha = 0.7) +
geom_point(data = data.frame(dataset = c("Benign", "Pathogenic"),
median = c(median(big_data), median(small_data))),
aes(x = dataset, y = median),
color = "black", size = 3) +
labs(title = "Bootstrap Distributions of Median",
y = "Median", x = "") +
theme_minimal() +
theme(legend.position = "none")
# Display results
cat("Big data median 95% CI:", round(ci_big, 3), "\n")
cat("Small data median 95% CI:", round(ci_small, 3), "\n")
df_boot <- data.frame(
median = c(boot_big, boot_small),
dataset = rep(c("Benign", "Pathogenic"), each = 1000)
)
ggplot(df_boot, aes(x = dataset, y = median, fill = dataset)) +
geom_violin(alpha = 0.7) +
geom_point(data = data.frame(dataset = c("Benign", "Pathogenic"),
median = c(median(big_data), median(small_data))),
aes(x = dataset, y = median),
color = "black", size = 3) +
labs(title = "Bootstrap Distributions of Median",
y = "Median", x = "") +
theme_minimal() +
theme(legend.position = "none")
load("/shares/CIBIO-Storage/BCG/scratch/PLM_DB_project/scripts/ClinvarPLL3.RData")
benign <- c(scores.types.PLLmaxfreq[[1]],scores.types.PLLmaxfreq[[2]],scores.types.PLLmaxfreq[[3]])
pathogenic <- c(scores.types.PLLmaxfreq[[4]],scores.types.PLLmaxfreq[[5]],scores.types.PLLmaxfreq[[6]])
set.seed(123)
# Your data vectors
big_data <- na.omit(benign)    # replace with your data
small_data <- na.omit(pathogenic)  # replace with your data
# Function to bootstrap median
bootstrap_median <- function(data, n_boot = 1000) {
medians <- numeric(n_boot)
n <- length(data)
for (i in 1:n_boot) {
sample_i <- sample(data, size = n, replace = TRUE)
medians[i] <- median(sample_i)
}
return(medians)
}
# Bootstrap medians
boot_big <- bootstrap_median(big_data, 1000)
boot_small <- bootstrap_median(small_data, 1000)
# Calculate 95% confidence intervals
ci_big <- quantile(boot_big, probs = c(0.025, 0.975))
ci_small <- quantile(boot_small, probs = c(0.025, 0.975))
# Display results
cat("Big data median 95% CI:", round(ci_big, 3), "\n")
cat("Small data median 95% CI:", round(ci_small, 3), "\n")
library(ggplot2)
library(tidyr)
library(dplyr)
df_boot <- data.frame(
median = c(boot_big, boot_small),
dataset = rep(c("Benign", "Pathogenic"), each = 1000)
)
ggplot(df_boot, aes(x = dataset, y = median, fill = dataset)) +
geom_violin(alpha = 0.7) +
geom_point(data = data.frame(dataset = c("Benign", "Pathogenic"),
median = c(median(big_data), median(small_data))),
aes(x = dataset, y = median),
color = "black", size = 3) +
labs(title = "Bootstrap Distributions of Median",
y = "Median", x = "") +
theme_minimal() +
theme(legend.position = "none")
length(benign)
length(pathogenic)
boxplot(scores.types.PLLref[[5]],scores.types.PLLref[[6]])
boxplot(scores.types.PLLref[[4]],scores.types.PLLref[[5]])
boxplot(scores.types.PLLref[[1]],scores.types.PLLref[[6]])
lapply(scores.types.PLLref,length)
library(data.table)
tab <- fread("/shares/CIBIO-Storage/BCG/scratch/PLM_DB_project/scripts/gwas_catalog_v1.0-associations_e114_r2025-05-13.tsv",data.table=F)
scores <- fread("/shares/CIBIO-Storage/BCG/scratch/PLM_DB_project/scoring/all_scores.tsv",data.table=F)
count <- table(scores$transcript_id)
del <- names(count[which(count==1)])
scores.del <- scores[which(scores$transcript_id%in%del),]
scores <- scores[-which(scores$transcript_id%in%del),]
all.contexts <- paste(unique(tab$CONTEXT),collapse=";")
all.contexts <- gsub("x",";",all.contexts)
all.contexts <- unique(gsub(" ","",strsplit(all.contexts,";")[[1]]))
idx <- sapply(tab$CONTEXT,function(x)
{
elems <- gsub("x",";",x)
elems <- gsub(" ","",elems)
elems <- strsplit(elems,";")[[1]]
return(any(elems%in%c("missense_variant","stop_gained","start_lost","stop_lost","frameshift_variant","inframe_insertion","inframe_deletion","protein_altering_variant","stop_retained_variant")))
})
tab.coding <- tab[which(idx),]
tab.coding.cancer <- tab.coding[grep("cancer|carcinoma",tab.coding$`DISEASE/TRAIT`),]
cancers <- c("Prostate cancer","Basal cell carcinoma","Breast cancer","Skin cancer","Colorectal cancer","Lung cancer","Pancreatic cancer","Gastric cancer","Esophageal cancer","Epithelial ovarian cancer",
"Squamous cell carcinoma","Lung adenocarcinoma","Small cell lung carcinoma","Ovarian cancer","Prostate cancer (early onset)","Prostate cancer (late onset)","Breast cancer (early onset)",
"Lung cancer in ever smokers","Renal cell carcinoma","Oral cavity and pharyngeal cancer","Kidney cancer","Bladder cancer")
tab.coding.cancer <- tab.coding.cancer[which(tab.coding.cancer$`DISEASE/TRAIT`%in%cancers),]
tab.coding.cancer <- tab.coding.cancer[which(tab.coding.cancer$CONTEXT=="missense_variant"),]
idx <- sapply(scores$rsids,function(x)
{
elems <- strsplit(x,",")[[1]]
return(any(elems%in%tab.coding.cancer$SNPS))
})
scores.gwas.cancer <- scores[which(idx),]
tmp <- scores[-which(idx),]
length(na.omit(scores.gwas.cancer$esm_PLLR_ref))
length(na.omit(tmp$esm_PLLR_ref))
big_data <- na.omit(tmp$esm_PLLR_ref)
small_data <- na.omit(scores.gwas.cancer$esm_PLLR_ref)
length(big_data)
# Function to bootstrap median
bootstrap_median <- function(data, n_boot = 1000) {
medians <- numeric(n_boot)
n <- length(data)
for (i in 1:n_boot) {
sample_i <- sample(data, size = n, replace = TRUE)
medians[i] <- median(sample_i)
}
return(medians)
}
# Bootstrap medians
boot_big <- bootstrap_median(big_data, 1000)
boot_small <- bootstrap_median(small_data, 1000)
# Calculate 95% confidence intervals
ci_big <- quantile(boot_big, probs = c(0.025, 0.975))
ci_small <- quantile(boot_small, probs = c(0.025, 0.975))
# Display results
cat("Big data median 95% CI:", round(ci_big, 3), "\n")
cat("Small data median 95% CI:", round(ci_small, 3), "\n")
library(ggplot2)
library(tidyr)
library(dplyr)
df_boot <- data.frame(
median = c(boot_big, boot_small),
dataset = rep(c("Benign", "Pathogenic"), each = 1000)
)
ggplot(df_boot, aes(x = dataset, y = median, fill = dataset)) +
geom_violin(alpha = 0.7) +
geom_point(data = data.frame(dataset = c("Benign", "Pathogenic"),
median = c(median(big_data), median(small_data))),
aes(x = dataset, y = median),
color = "black", size = 3) +
labs(title = "Bootstrap Distributions of Median",
y = "Median", x = "") +
theme_minimal() +
theme(legend.position = "none")
0.06-0.16*0.1
shiny::runApp('/shares/CIBIO-Storage/BCG/scratch/PLM_DB_project/PLM_DB/app')
