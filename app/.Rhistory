}
return(medians)
}
# Bootstrap medians
boot_big <- bootstrap_median(big_data, 1000)
boot_small <- bootstrap_median(small_data, 1000)
# Calculate 95% confidence intervals
ci_big <- quantile(boot_big, probs = c(0.025, 0.975))
ci_small <- quantile(boot_small, probs = c(0.025, 0.975))
# Display results
cat("Big data median 95% CI:", round(ci_big, 3), "\n")
cat("Small data median 95% CI:", round(ci_small, 3), "\n")
# Optional: visualize
library(ggplot2)
library(tidyr)
library(dplyr)
df_boot <- data.frame(
median = c(boot_big, boot_small),
dataset = rep(c("Benign", "Pathogenic"), each = 1000)
)
ggplot(df_boot, aes(x = dataset, y = median, fill = dataset)) +
geom_violin(alpha = 0.7) +
geom_point(data = data.frame(dataset = c("Benign", "Pathogenic"),
median = c(median(big_data), median(small_data))),
aes(x = dataset, y = median),
color = "black", size = 3) +
labs(title = "Bootstrap Distributions of Median",
y = "Median", x = "") +
theme_minimal() +
theme(legend.position = "none")
big_data <- na.omit(scores$delta_esm_PLL[-idx])
small_data <- na.omit(scores$delta_esm_PLL[idx])
# Function to bootstrap median
bootstrap_median <- function(data, n_boot = 1000) {
medians <- numeric(n_boot)
n <- length(data)
for (i in 1:n_boot) {
sample_i <- sample(data, size = n, replace = TRUE)
medians[i] <- median(sample_i)
}
return(medians)
}
# Bootstrap medians
boot_big <- bootstrap_median(big_data, 1000)
boot_small <- bootstrap_median(small_data, 1000)
# Calculate 95% confidence intervals
ci_big <- quantile(boot_big, probs = c(0.025, 0.975))
ci_small <- quantile(boot_small, probs = c(0.025, 0.975))
# Display results
cat("Big data median 95% CI:", round(ci_big, 3), "\n")
cat("Small data median 95% CI:", round(ci_small, 3), "\n")
library(ggplot2)
library(tidyr)
library(dplyr)
df_boot <- data.frame(
median = c(boot_big, boot_small),
dataset = rep(c("Benign", "Pathogenic"), each = 1000)
)
ggplot(df_boot, aes(x = dataset, y = median, fill = dataset)) +
geom_violin(alpha = 0.7) +
geom_point(data = data.frame(dataset = c("Benign", "Pathogenic"),
median = c(median(big_data), median(small_data))),
aes(x = dataset, y = median),
color = "black", size = 3) +
labs(title = "Bootstrap Distributions of Median",
y = "Median", x = "") +
theme_minimal() +
theme(legend.position = "none")
list <- fread("/shares/CIBIO-Storage/BCG/scratch1/Resources/geneLists/TumorSupp.txt",data.table=F)
idx <- which(scores$gene_id%in%list$ensembl_gene_id)
big_data <- na.omit(scores$delta_esm_PLL[-idx])
small_data <- na.omit(scores$delta_esm_PLL[idx])
list <- fread("/shares/CIBIO-Storage/BCG/scratch1/Resources/geneLists/TumorSupp.csv",data.table=F)
idx <- which(scores$gene_id%in%list$ensembl_gene_id)
big_data <- na.omit(scores$delta_esm_PLL[-idx])
small_data <- na.omit(scores$delta_esm_PLL[idx])
# Function to bootstrap median
bootstrap_median <- function(data, n_boot = 1000) {
medians <- numeric(n_boot)
n <- length(data)
for (i in 1:n_boot) {
sample_i <- sample(data, size = n, replace = TRUE)
medians[i] <- median(sample_i)
}
return(medians)
}
# Bootstrap medians
boot_big <- bootstrap_median(big_data, 1000)
boot_small <- bootstrap_median(small_data, 1000)
# Calculate 95% confidence intervals
ci_big <- quantile(boot_big, probs = c(0.025, 0.975))
ci_small <- quantile(boot_small, probs = c(0.025, 0.975))
# Display results
cat("Big data median 95% CI:", round(ci_big, 3), "\n")
cat("Small data median 95% CI:", round(ci_small, 3), "\n")
library(ggplot2)
library(tidyr)
library(dplyr)
df_boot <- data.frame(
median = c(boot_big, boot_small),
dataset = rep(c("Benign", "Pathogenic"), each = 1000)
)
ggplot(df_boot, aes(x = dataset, y = median, fill = dataset)) +
geom_violin(alpha = 0.7) +
geom_point(data = data.frame(dataset = c("Benign", "Pathogenic"),
median = c(median(big_data), median(small_data))),
aes(x = dataset, y = median),
color = "black", size = 3) +
labs(title = "Bootstrap Distributions of Median",
y = "Median", x = "") +
theme_minimal() +
theme(legend.position = "none")
list <- fread("/shares/CIBIO-Storage/BCG/scratch1/Resources/geneLists/Oncogenes.csv",data.table=F)
idx <- which(scores$gene_id%in%list$ensembl_gene_id)
big_data <- na.omit(scores$delta_esm_PLL[-idx])
small_data <- na.omit(scores$delta_esm_PLL[idx])
# Function to bootstrap median
bootstrap_median <- function(data, n_boot = 1000) {
medians <- numeric(n_boot)
n <- length(data)
for (i in 1:n_boot) {
sample_i <- sample(data, size = n, replace = TRUE)
medians[i] <- median(sample_i)
}
return(medians)
}
# Bootstrap medians
boot_big <- bootstrap_median(big_data, 1000)
boot_small <- bootstrap_median(small_data, 1000)
# Calculate 95% confidence intervals
ci_big <- quantile(boot_big, probs = c(0.025, 0.975))
ci_small <- quantile(boot_small, probs = c(0.025, 0.975))
# Display results
cat("Big data median 95% CI:", round(ci_big, 3), "\n")
cat("Small data median 95% CI:", round(ci_small, 3), "\n")
library(ggplot2)
library(tidyr)
library(dplyr)
df_boot <- data.frame(
median = c(boot_big, boot_small),
dataset = rep(c("Benign", "Pathogenic"), each = 1000)
)
ggplot(df_boot, aes(x = dataset, y = median, fill = dataset)) +
geom_violin(alpha = 0.7) +
geom_point(data = data.frame(dataset = c("Benign", "Pathogenic"),
median = c(median(big_data), median(small_data))),
aes(x = dataset, y = median),
color = "black", size = 3) +
labs(title = "Bootstrap Distributions of Median",
y = "Median", x = "") +
theme_minimal() +
theme(legend.position = "none")
small_data <- sample(na.omit(scores$delta_esm_PLL[-idx]),length(small_data),replace=F)
# Function to bootstrap median
bootstrap_median <- function(data, n_boot = 1000) {
medians <- numeric(n_boot)
n <- length(data)
for (i in 1:n_boot) {
sample_i <- sample(data, size = n, replace = TRUE)
medians[i] <- median(sample_i)
}
return(medians)
}
# Bootstrap medians
boot_big <- bootstrap_median(big_data, 1000)
boot_small <- bootstrap_median(small_data, 1000)
# Calculate 95% confidence intervals
ci_big <- quantile(boot_big, probs = c(0.025, 0.975))
ci_small <- quantile(boot_small, probs = c(0.025, 0.975))
# Display results
cat("Big data median 95% CI:", round(ci_big, 3), "\n")
cat("Small data median 95% CI:", round(ci_small, 3), "\n")
library(ggplot2)
library(tidyr)
library(dplyr)
df_boot <- data.frame(
median = c(boot_big, boot_small),
dataset = rep(c("Benign", "Pathogenic"), each = 1000)
)
ggplot(df_boot, aes(x = dataset, y = median, fill = dataset)) +
geom_violin(alpha = 0.7) +
geom_point(data = data.frame(dataset = c("Benign", "Pathogenic"),
median = c(median(big_data), median(small_data))),
aes(x = dataset, y = median),
color = "black", size = 3) +
labs(title = "Bootstrap Distributions of Median",
y = "Median", x = "") +
theme_minimal() +
theme(legend.position = "none")
big_data <- na.omit(scores$delta_esm_PLL[-idx])
small_data <- na.omit(scores$delta_esm_PLL[idx])
small_data <- sample(na.omit(scores$delta_esm_PLL[-idx]),length(small_data),replace=F)
# Function to bootstrap median
bootstrap_median <- function(data, n_boot = 1000) {
medians <- numeric(n_boot)
n <- length(data)
for (i in 1:n_boot) {
sample_i <- sample(data, size = n, replace = TRUE)
medians[i] <- median(sample_i)
}
return(medians)
}
# Bootstrap medians
boot_big <- bootstrap_median(big_data, 1000)
boot_small <- bootstrap_median(small_data, 1000)
# Calculate 95% confidence intervals
ci_big <- quantile(boot_big, probs = c(0.025, 0.975))
ci_small <- quantile(boot_small, probs = c(0.025, 0.975))
# Display results
cat("Big data median 95% CI:", round(ci_big, 3), "\n")
cat("Small data median 95% CI:", round(ci_small, 3), "\n")
# Optional: visualize
library(ggplot2)
library(tidyr)
library(dplyr)
df_boot <- data.frame(
median = c(boot_big, boot_small),
dataset = rep(c("Benign", "Pathogenic"), each = 1000)
)
ggplot(df_boot, aes(x = dataset, y = median, fill = dataset)) +
geom_violin(alpha = 0.7) +
geom_point(data = data.frame(dataset = c("Benign", "Pathogenic"),
median = c(median(big_data), median(small_data))),
aes(x = dataset, y = median),
color = "black", size = 3) +
labs(title = "Bootstrap Distributions of Median",
y = "Median", x = "") +
theme_minimal() +
theme(legend.position = "none")
# ---- Function to bootstrap a quantile ----
bootstrap_quantile <- function(data, q = 0.9, n_boot = 1000) {
replicate(n_boot, {
sample_i <- sample(data, replace = TRUE)
quantile(sample_i, probs = q)
})
}
# ---- Bootstrap quantiles ----
q_level <- 0.9
n_boot <- 1000
boot_big <- bootstrap_quantile(big_data, q = q_level, n_boot = n_boot)
boot_small <- bootstrap_quantile(small_data, q = q_level, n_boot = n_boot)
# ---- Compare: difference in quantiles ----
boot_diff <- boot_big - boot_small
ci_diff <- quantile(boot_diff, c(0.025, 0.975))
# ---- Print result ----
cat("Difference in", q_level * 100, "th percentile (big - small):\n")
cat("95% CI:", round(ci_diff[1], 3), "to", round(ci_diff[2], 3), "\n")
# ---- Optional: plot bootstrap distribution of the difference ----
library(ggplot2)
df <- data.frame(difference = boot_diff)
ggplot(df, aes(x = difference)) +
geom_histogram(bins = 30, fill = "#66c2a5", color = "white") +
geom_vline(xintercept = ci_diff, color = "red", linetype = "dashed") +
geom_vline(xintercept = mean(boot_diff), color = "blue") +
labs(title = paste0("Bootstrap Distribution of Difference in ", q_level * 100, "th Percentile"),
x = "Difference (big_data - small_data)", y = "Frequency") +
theme_minimal()
big_data <- na.omit(scores$delta_esm_PLL[-idx])
small_data <- na.omit(scores$delta_esm_PLL[idx])
bootstrap_quantile <- function(data, q = 0.9, n_boot = 1000) {
replicate(n_boot, {
sample_i <- sample(data, replace = TRUE)
quantile(sample_i, probs = q)
})
}
# ---- Bootstrap quantiles ----
q_level <- 0.9
n_boot <- 1000
boot_big <- bootstrap_quantile(big_data, q = q_level, n_boot = n_boot)
boot_small <- bootstrap_quantile(small_data, q = q_level, n_boot = n_boot)
# ---- Compare: difference in quantiles ----
boot_diff <- boot_big - boot_small
ci_diff <- quantile(boot_diff, c(0.025, 0.975))
# ---- Print result ----
cat("Difference in", q_level * 100, "th percentile (big - small):\n")
cat("95% CI:", round(ci_diff[1], 3), "to", round(ci_diff[2], 3), "\n")
# ---- Optional: plot bootstrap distribution of the difference ----
library(ggplot2)
df <- data.frame(difference = boot_diff)
ggplot(df, aes(x = difference)) +
geom_histogram(bins = 30, fill = "#66c2a5", color = "white") +
geom_vline(xintercept = ci_diff, color = "red", linetype = "dashed") +
geom_vline(xintercept = mean(boot_diff), color = "blue") +
labs(title = paste0("Bootstrap Distribution of Difference in ", q_level * 100, "th Percentile"),
x = "Difference (big_data - small_data)", y = "Frequency") +
theme_minimal()
# ---- Function to bootstrap a quantile ----
bootstrap_quantile <- function(data, q = 0.95, n_boot = 1000) {
replicate(n_boot, {
sample_i <- sample(data, replace = TRUE)
quantile(sample_i, probs = q)
})
}
# ---- Bootstrap quantiles ----
q_level <- 0.95
n_boot <- 1000
boot_big <- bootstrap_quantile(big_data, q = q_level, n_boot = n_boot)
boot_small <- bootstrap_quantile(small_data, q = q_level, n_boot = n_boot)
# ---- Compare: difference in quantiles ----
boot_diff <- boot_big - boot_small
ci_diff <- quantile(boot_diff, c(0.025, 0.975))
# ---- Print result ----
cat("Difference in", q_level * 100, "th percentile (big - small):\n")
cat("95% CI:", round(ci_diff[1], 3), "to", round(ci_diff[2], 3), "\n")
# ---- Optional: plot bootstrap distribution of the difference ----
library(ggplot2)
df <- data.frame(difference = boot_diff)
ggplot(df, aes(x = difference)) +
geom_histogram(bins = 30, fill = "#66c2a5", color = "white") +
geom_vline(xintercept = ci_diff, color = "red", linetype = "dashed") +
geom_vline(xintercept = mean(boot_diff), color = "blue") +
labs(title = paste0("Bootstrap Distribution of Difference in ", q_level * 100, "th Percentile"),
x = "Difference (big_data - small_data)", y = "Frequency") +
theme_minimal()
list <- fread("/shares/CIBIO-Storage/BCG/scratch1/Resources/geneLists/CancerGenesList.csv",data.table=F)
idx <- which(scores$gene_id%in%list$ensembl_gene_id)
big_data <- na.omit(scores$delta_esm_PLL[-idx])
small_data <- na.omit(scores$delta_esm_PLL[idx])
# ---- Function to bootstrap a quantile ----
bootstrap_quantile <- function(data, q = 0.9, n_boot = 1000) {
replicate(n_boot, {
sample_i <- sample(data, replace = TRUE)
quantile(sample_i, probs = q)
})
}
# ---- Bootstrap quantiles ----
q_level <- 0.95
n_boot <- 1000
boot_big <- bootstrap_quantile(big_data, q = q_level, n_boot = n_boot)
boot_small <- bootstrap_quantile(small_data, q = q_level, n_boot = n_boot)
# ---- Compare: difference in quantiles ----
boot_diff <- boot_big - boot_small
ci_diff <- quantile(boot_diff, c(0.025, 0.975))
# ---- Print result ----
cat("Difference in", q_level * 100, "th percentile (big - small):\n")
cat("95% CI:", round(ci_diff[1], 3), "to", round(ci_diff[2], 3), "\n")
# ---- Optional: plot bootstrap distribution of the difference ----
library(ggplot2)
df <- data.frame(difference = boot_diff)
ggplot(df, aes(x = difference)) +
geom_histogram(bins = 30, fill = "#66c2a5", color = "white") +
geom_vline(xintercept = ci_diff, color = "red", linetype = "dashed") +
geom_vline(xintercept = mean(boot_diff), color = "blue") +
labs(title = paste0("Bootstrap Distribution of Difference in ", q_level * 100, "th Percentile"),
x = "Difference (big_data - small_data)", y = "Frequency") +
theme_minimal()
scores$delta_esm_PLL[which(scores$gene_id=="ENSG00000164002")]
hist(scores$delta_esm_PLL)
abline(v=0.04799406)
hist(scores$delta_esm_PLL[which(scores$n_variants==1)])
abline(v=0.04799406)
length(which(scores$n_variants==1))
hist(scores.gwas.cancer$esm_PLLR_ref)
hist(scores.gwas.cancer$esm_PLLR_ref,breaks=100)
hist(pathogenic)
hist(pathogenic,breaks=100)
library(data.table)
tab <- fread("/shares/CIBIO-Storage/BCG/scratch/PLM_DB_project/scripts/gwas_catalog_v1.0-associations_e114_r2025-05-13.tsv",data.table=F)
scores <- fread("/shares/CIBIO-Storage/BCG/scratch/PLM_DB_project/scoring/all_scores.tsv",data.table=F)
count <- table(scores$transcript_id)
del <- names(count[which(count==1)])
scores.del <- scores[which(scores$transcript_id%in%del),]
scores <- scores[-which(scores$transcript_id%in%del),]
all.contexts <- paste(unique(tab$CONTEXT),collapse=";")
all.contexts <- gsub("x",";",all.contexts)
all.contexts <- unique(gsub(" ","",strsplit(all.contexts,";")[[1]]))
idx <- sapply(tab$CONTEXT,function(x)
{
elems <- gsub("x",";",x)
elems <- gsub(" ","",elems)
elems <- strsplit(elems,";")[[1]]
return(any(elems%in%c("missense_variant","stop_gained","start_lost","stop_lost","frameshift_variant","inframe_insertion","inframe_deletion","protein_altering_variant","stop_retained_variant")))
})
tab.coding <- tab[which(idx),]
tab.coding.cancer <- tab.coding[grep("cancer|carcinoma",tab.coding$`DISEASE/TRAIT`),]
cancers <- c("Prostate cancer","Basal cell carcinoma","Breast cancer","Skin cancer","Colorectal cancer","Lung cancer","Pancreatic cancer","Gastric cancer","Esophageal cancer","Epithelial ovarian cancer",
"Squamous cell carcinoma","Lung adenocarcinoma","Small cell lung carcinoma","Ovarian cancer","Prostate cancer (early onset)","Prostate cancer (late onset)","Breast cancer (early onset)",
"Lung cancer in ever smokers","Renal cell carcinoma","Oral cavity and pharyngeal cancer","Kidney cancer","Bladder cancer")
tab.coding.cancer <- tab.coding.cancer[which(tab.coding.cancer$`DISEASE/TRAIT`%in%cancers),]
tab.coding.cancer <- tab.coding.cancer[which(tab.coding.cancer$CONTEXT=="missense_variant"),]
idx <- sapply(scores$rsids,function(x)
{
elems <- strsplit(x,",")[[1]]
return(any(elems%in%tab.coding.cancer$SNPS))
})
scores.gwas.cancer <- scores[which(idx),]
tmp <- scores[-which(idx),]
big_data <- na.omit(tmp$esm_PLLR_maxfreq)
small_data <- na.omit(scores.gwas.cancer$esm_PLLR_maxfreq)
hist(small_data)
hist(small_data,breaks=100)
median(small_data)
big_data <- na.omit(tmp$esm_PLLR_maxfreq)
small_data <- na.omit(scores.gwas.cancer$esm_PLLR_maxfreq)
# Function to bootstrap median
bootstrap_median <- function(data, n_boot = 1000) {
medians <- numeric(n_boot)
n <- length(data)
for (i in 1:n_boot) {
sample_i <- sample(data, size = n, replace = TRUE)
medians[i] <- median(sample_i)
}
return(medians)
}
# Bootstrap medians
boot_big <- bootstrap_median(big_data, 1000)
boot_small <- bootstrap_median(small_data, 1000)
boot_big
boot_small
# Calculate 95% confidence intervals
ci_big <- quantile(boot_big, probs = c(0.025, 0.975))
ci_small <- quantile(boot_small, probs = c(0.025, 0.975))
# Display results
cat("Big data median 95% CI:", round(ci_big, 3), "\n")
cat("Small data median 95% CI:", round(ci_small, 3), "\n")
library(ggplot2)
library(tidyr)
library(dplyr)
df_boot <- data.frame(
median = c(boot_big, boot_small),
dataset = rep(c("Benign", "Pathogenic"), each = 1000)
)
ggplot(df_boot, aes(x = dataset, y = median, fill = dataset)) +
geom_violin(alpha = 0.7) +
geom_point(data = data.frame(dataset = c("Benign", "Pathogenic"),
median = c(median(big_data), median(small_data))),
aes(x = dataset, y = median),
color = "black", size = 3) +
labs(title = "Bootstrap Distributions of Median",
y = "Median", x = "") +
theme_minimal() +
theme(legend.position = "none")
big_data <- na.omit(tmp$esm_PLLR_ref)
small_data <- na.omit(scores.gwas.cancer$esm_PLLR_ref
)
medina(small_data)
median(small_data)
big_data <- na.omit(tmp$esm_PLLR_ref)
small_data <- na.omit(scores.gwas.cancer$esm_PLLR_ref)
# Function to bootstrap median
bootstrap_median <- function(data, n_boot = 1000) {
medians <- numeric(n_boot)
n <- length(data)
for (i in 1:n_boot) {
sample_i <- sample(data, size = n, replace = TRUE)
medians[i] <- median(sample_i)
}
return(medians)
}
# Bootstrap medians
boot_big <- bootstrap_median(big_data, 1000)
boot_small <- bootstrap_median(small_data, 1000)
# Calculate 95% confidence intervals
ci_big <- quantile(boot_big, probs = c(0.025, 0.975))
ci_small <- quantile(boot_small, probs = c(0.025, 0.975))
# Display results
cat("Big data median 95% CI:", round(ci_big, 3), "\n")
cat("Small data median 95% CI:", round(ci_small, 3), "\n")
# Optional: visualize
library(ggplot2)
library(tidyr)
library(dplyr)
df_boot <- data.frame(
median = c(boot_big, boot_small),
dataset = rep(c("Benign", "Pathogenic"), each = 1000)
)
ggplot(df_boot, aes(x = dataset, y = median, fill = dataset)) +
geom_violin(alpha = 0.7) +
geom_point(data = data.frame(dataset = c("Benign", "Pathogenic"),
median = c(median(big_data), median(small_data))),
aes(x = dataset, y = median),
color = "black", size = 3) +
labs(title = "Bootstrap Distributions of Median",
y = "Median", x = "") +
theme_minimal() +
theme(legend.position = "none")
shiny::runApp('/shares/CIBIO-Storage/BCG/scratch/PLM_DB_project/PLM_DB/app')
runApp('/shares/CIBIO-Storage/BCG/scratch/PLM_DB_project/PLM_DB/app')
runApp('/shares/CIBIO-Storage/BCG/scratch/PLM_DB_project/PLM_DB/app')
shiny::runApp('/shares/CIBIO-Storage/BCG/scratch/PLM_DB_project/PLM_DB/app')
runApp('/shares/CIBIO-Storage/BCG/scratch/PLM_DB_project/PLM_DB/app')
runApp('/shares/CIBIO-Storage/BCG/scratch/PLM_DB_project/PLM_DB/app')
scores <- fread("/shares/CIBIO-Storage/BCG/scratch/PLM_DB_project/scoring/all_scores.tsv",data.table=F)
library(data.table)
library(parallel)
library(ggplot2)
library(tidyr)
library(dplyr)
library(biomaRT)
scores <- fread("/shares/CIBIO-Storage/BCG/scratch/PLM_DB_project/scoring/all_scores.tsv",data.table=F)
snps <- cbind(
strsplit(paste(scores$rsids,collapse=","),",")[[1]],
strsplit(paste(scores$variant_types,collapse=","),",")[[1]],
strsplit(paste(scores$variant_coordinates,collapse=","),",")[[1]],"")
snps <- unique(snps)
dim(snps)
tmp <- scores[grep(scores$rsids=="rs214814"),]
tmp <- scores[grep("rs214814",scores$rsids),]
View(tmp)
tmp <- scores[grep("rs1802236",scores$rsids),]
2.5/8.5
2.5/8.5
2.5/9.5
41648.08*0.263
43289.87*(28664/(28664+24000))
28664-23561.84
10953.45-5102.16
6247.21*(28664/(28664+24000))
5851.29+3400.236
9251.526-4965.4
shiny::runApp('/shares/CIBIO-Storage/BCG/scratch/PLM_DB_project/PLM_DB/app')
runApp('/shares/CIBIO-Storage/BCG/scratch/PLM_DB_project/PLM_DB/app')
